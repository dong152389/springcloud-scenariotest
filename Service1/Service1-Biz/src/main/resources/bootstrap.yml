spring:
  kafka:
    bootstrap-servers:
      - 192.168.25.10:9092
      - 192.168.25.10:9093
      - 192.168.25.10:9094
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
    consumer:
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      enable-auto-commit: false
    listener:
      ack-mode: manual
  data:
    redis:
      host: 192.168.25.10
      port: 6379
      password: 111111

## 下面都是默认的配置，如果想要进行更细致的配置，看这个https://docs.spring.io/spring-cloud-circuitbreaker/docs/3.0.4/reference/html/#default-configuration
resilience4j.circuitbreaker:
  configs:
    default:
      registerHealthIndicator: true #注册一个健康指示器,以便可以通过 Actuator 的健康端点监控熔断器的状态
      failureRateThreshold: 50 #设置50%的调用失败时打开断路器，超过失败请求百分⽐CircuitBreaker变为OPEN状态。
      slidingWindowType: TIME_BASED # 计数型（COUNT_BASED）：基于请求数量的滑动窗口，窗口的滑动是基于请求的数量。每当一个请求到达时，窗口会滑动并记录请求   ##时间型（TIME_BASED）：基于时间的滑动窗口，窗口的滑动是基于时间的。例如，窗口每隔一分钟滑动一次，并统计在该时间段内的请求数量。
      slidingWindowSize: 10 #滑动窗口的大小,配置TIME_BASED表示10秒,配置COUNT_BASED表示10个请求
      minimumNumberOfCalls: 5 #断路器计算失败率或慢调用率之前所需的最小样本(每个滑动窗口周期)。如果minimumNumberOfCalls为10，则必须最少记录10个样本，然后才能计算失败率。如果只记录了9次调用，即使所有9次调用都失败，断路器也不会开启。
      automaticTransitionFromOpenToHalfOpenEnabled: true #是否启用自动从开启状态过渡到半开状态，默认值为true。如果启用，CircuitBreaker将自动从开启状态过渡到半开状态，并允许一些请求通过以测试服务是否恢复正常
      waitDurationInOpenState: 20s #从OPEN到HALF_OPEN状态需要等待的时间
      permittedNumberOfCallsInHalfOpenState: 3 #半开状态允许的最大请求数，默认值为10。在半开状态下，CircuitBreaker将允许最多permittedNumberOfCallsInHalfOpenState个请求通过，如果这些请求调用的失败率等于或高于50%，CircuitBreaker将重新进入开启状态。
      eventConsumerBufferSize: 10 #事件消费者的缓冲区大小，表示事件消费者最多可以缓存 10 个事件。
      recordExceptions: #记录哪些异常为失败
        - org.springframework.web.client.HttpServerErrorException
        - java.io.IOException
        - feign.FeignException
        - java.util.concurrent.TimeoutException
resilience4j.timelimiter:
  configs:
    default:
      timeoutDuration: 5s
      cancelRunningFuture: true